colnames(data) <- columns
head(data)
df <- cbind.data.frame(state.x77, data);
df <- subset(df, select = -c(div, `Life Exp`, `HS Grad`, `Frost`, abb, are))
illiteracy_converter <- function(number){
if(number < 1){
level <- "low"
}else if(number < 2){
level <- "some"
}else if (number >= 2){
level <- "high"
}
return (level);
}
df <-  cbind.data.frame(df, "Illiteracy_word" = sapply(df$Illiteracy, illiteracy_converter))
df <- subset(df, reg == "West" & Illiteracy_word == "low")
#df[which.max(df$Income),]```
df <- cbind.data.frame(state.x77, data);
df <- subset(df, select = -c(div, `Life Exp`, `HS Grad`, `Frost`, abb, are))
illiteracy_converter <- function(number){
if(number < 1){
level <- "low"
}else if(number < 2){
level <- "some"
}else if (number >= 2){
level <- "high"
}
return (level);
}
df <-  cbind.data.frame(df, "Illiteracy_word" = sapply(df$Illiteracy, illiteracy_converter))
df <- subset(df, reg == "West" & Illiteracy_word == "low")
df[which.max(df$Income),]```
newframe <- swiss[c(1:3, 10:12), c(3:4,6)]
newframe["Sarine", "Infant.Mortality"] <- NA
newframe <- rbind(newframe, "Total"=c(sum(newframe$Examination), sum(newframe$Education), sum(newframe$Infant.Mortality, na.rm=T)))
totalexamination <- newframe$Examination[nrow(newframe)]
newframe <- cbind(newframe, "Proportion"=c(newframe$Examination / totalexamination))
data <- cbind.data.frame(state.abb, state.area, state.division, state.name, state.region)
rownames(data) <- state.name
#data
columns <- colnames(data)
columns <- strsplit(columns, "[.]")
columns <- sapply(columns, '[', 2)
columns <- substr(columns, 0, 3)
colnames(data) <- columns
head(data)
df <- cbind.data.frame(state.x77, data);
df <- subset(df, select = -c(div, `Life Exp`, `HS Grad`, `Frost`, abb, are))
illiteracy_converter <- function(number){
if(number < 1){
level <- "low"
}else if(number < 2){
level <- "some"
}else if (number >= 2){
level <- "high"
}
return (level);
}
df <-  cbind.data.frame(df, "Illiteracy_word" = sapply(df$Illiteracy, illiteracy_converter))
df <- subset(df, reg == "West" & Illiteracy_word == "low")
df[which.max(df$Income),]```
df <- cbind.data.frame(state.x77, data);
df <- subset(df, select = -c(div, `Life Exp`, `HS Grad`, `Frost`, abb, are))
illiteracy_converter <- function(number){
if(number < 1){
level <- "low"
}else if(number < 2){
level <- "some"
}else if (number >= 2){
level <- "high"
}
return (level);
}
df <-  cbind.data.frame(df, "Illiteracy_word" = sapply(df$Illiteracy, illiteracy_converter))
df <- subset(df, reg == "West" & Illiteracy_word == "low")
df[which.max(df$Income),]
View(df)
library(imager)
library(ggplot2)
library(dplyr)
fpath <- 'C:/Users/marco/Downloads/blue_book.jpg'
bdf <- as.data.frame(load.image(fpath))
bdf <- mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
# bdf <- data.frame(cc = [0:1000])
ylimmm <- as.numeric(nrow(bdf) )
plot_a_hist_plz <- function(df, channel_number){
channel_r <- subset(df, cc == channel_number & value > 0, select = c(value))
channel_r <- as.numeric(unlist(channel_r))
return(hist(channel_r, breaks=100000))
}
plot(load.image(fpath))
plot_a_hist_plz(bdf, 1)
plot_a_hist_plz(bdf, 2)
plot_a_hist_plz(bdf, 3)
library(imager)
library(ggplot2)
library(dplyr)
fpath <- 'C:/Users/marco/Downloads/blue_book.jpg'
bdf <- as.data.frame(load.image(fpath))
bdf <- mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
# bdf <- data.frame(cc = [0:1000])
ylimmm <- as.numeric(nrow(bdf) )
plot_a_hist_plz <- function(df, channel_number){
channel_r <- subset(df, cc == channel_number & value > 0, select = c(value))
channel_r <- as.numeric(unlist(channel_r))
return(hist(channel_r, breaks=1000))
}
plot(load.image(fpath))
plot_a_hist_plz(bdf, 1)
plot_a_hist_plz(bdf, 2)
plot_a_hist_plz(bdf, 3)
library(imager)
library(ggplot2)
library(dplyr)
fpath <- 'C:/Users/marco/Downloads/blue_book.jpg'
bdf <- as.data.frame(load.image(fpath))
bdf <- mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
# bdf <- data.frame(cc = [0:1000])
ylimmm <- as.numeric(nrow(bdf) )
plot_a_hist_plz <- function(df, channel_number){
channel_r <- subset(df, cc == channel_number & value > 0, select = c(value))
channel_r <- as.numeric(unlist(channel_r))
return(hist(channel_r, breaks=500))
}
plot(load.image(fpath))
plot_a_hist_plz(bdf, 1)
plot_a_hist_plz(bdf, 2)
plot_a_hist_plz(bdf, 3)
library(imager)
library(ggplot2)
library(dplyr)
fpath <- 'C:/Users/marco/Downloads/blue_book.jpg'
bdf <- as.data.frame(load.image(fpath))
bdf <- mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
# bdf <- data.frame(cc = [0:1000])
ylimmm <- as.numeric(nrow(bdf) )
plot_a_hist_plz <- function(df, channel_number){
channel_r <- subset(df, cc == channel_number & value > 0, select = c(value))
channel_r <- as.numeric(unlist(channel_r))
return(hist(channel_r, breaks=200))
}
plot(load.image(fpath))
plot_a_hist_plz(bdf, 1)
plot_a_hist_plz(bdf, 2)
plot_a_hist_plz(bdf, 3)
library(imager)
library(ggplot2)
library(dplyr)
fpath <- 'C:/Users/marco/Downloads/blue_book.jpg'
bdf <- as.data.frame(load.image(fpath))
bdf <- mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
# bdf <- data.frame(cc = [0:1000])
ylimmm <- as.numeric(nrow(bdf) )
plot_a_hist_plz <- function(df, channel_number){
channel_r <- subset(df, cc == channel_number & value > 0, select = c(value))
channel_r <- as.numeric(unlist(channel_r))
return(hist(channel_r, breaks=400))
}
plot(load.image(fpath))
plot_a_hist_plz(bdf, 1)
plot_a_hist_plz(bdf, 2)
plot_a_hist_plz(bdf, 3)
install.packages("leaflet")
library(leaflet)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
mymap
library(leaflet)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
mymap
my_data <- read.table(file = "C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls",
sep = "\t", header=TRUE)
install.packages("readxl")
read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
library(readxl)
read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
library(leaflet)
library(readxl)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
mymap <- mymap.addMarkers(mymap, lat = table$X-Coord., lng = table$Y-Coord.)
library(leaflet)
library(readxl)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
mymap <- addMarkers(mymap, lat = table$X-Coord., lng = table$Y-Coord.)
View(table)
library(leaflet)
library(readxl)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
mymap <- addMarkers(mymap, lat = table$`X-Coord.`, lng = table$`Y-Coord.`)
mymap
mymap <- addMarkers(mymap, lat = table$`X-Coord.`, lng = table$`Y-Coord.`, popup=table$`Straat`)
mymap
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
library(leaflet)
library(readxl)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
mymap <- addMarkers(mymap, lat = table$`X-Coord.`, lng = table$`Y-Coord.`, popup=table$`Straat`)
mymap
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.xslx")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.xslx")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.xlsx")
e
library(leaflet)
library(readxl)
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.xlsx")
library(leaflet)
library(readxl)
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.xlsx")
View(table)
library(leaflet)
library(readxl)
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.xlsx")
df$date <- as.Date(with(df, paste(table$iyear, table$imonth, table$iday,sep="-")), "%Y-%m-%d")
paste(table$iyear, table$imonth, table$iday,sep="-")
ymd(paste(table$iyear, table$imonth, table$iday,sep="-")
ymd(paste(table$iyear, table$imonth, table$iday,sep="-"))
ymd(paste(table$iyear, table$imonth, table$iday,sep="-"))
head(paste(table$iyear, table$imonth, table$iday,sep="-"))
ymd(paste(table$iyear, table$imonth, table$iday,sep="-"))
aggregate?
aggregate?
plot(aggregate(table, table$iyear, sum))
library(leaflet)
library(readxl)
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.xlsx")
plot(aggregate(table, table$iyear, sum))
install.packages("leafgl")
install.packages("leafgl")
library(leafgl)
library(readxl)
mymap <- leaflet()
library(leaflet)
library(leafgl)
library(readxl)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
mymap <- addMarkers(mymap, lat = table$`X-Coord.`, lng = table$`Y-Coord.`, popup=table$`Straat`)
mymap
library(leaflet)
library(leafgl)
library(readxl)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
mymap <- addMarkers(mymap, lat = table$`X-Coord.`, lng = table$`Y-Coord.`, popup=table$`Straat`)
mymap
library(readxl)
table <- read.csv("C:/Users/marco/Documents/School/Minor/R/globalterrorismdb_0919dist.csv", sep=";")
count <- aggregate(x = table$iyear, by = list(table$iyear), FUN = function(count){NROW(count)})
plot(x=count$`Group.1`, y=count$x, type="line")
mymap <- addMarkers(mymap, lat = table$`X-Coord.`, lng = table$`Y-Coord.`, popup=table$`Straat`)
attack_types <- aggregate(x = table$attacktype1_txt, by = list(table$attacktype1_txt), FUN = NROW)
attack_types[order(attack_types$x, decreasing=TRUE),]
#some practice
require(dplyr)
attacks_per_location <- table %>% count(country_txt, longitude, latitude)
attacks_per_location <- attacks_per_location[order(attacks_per_location$n, decreasing=TRUE),]
attacks_per_location$latitude <- as.numeric(gsub(",", ".", attacks_per_location$latitude))
attacks_per_location$longitude <- as.numeric(gsub(",", ".", attacks_per_location$longitude))
attackmap <- leaflet()
attackmap <- addTiles(attackmap)
attackmap <- addMarkers(attackmap, lat = attacks_per_location$latitude, lng = attacks_per_location$longitude, popup=attacks_per_location$n, clusterOptions = markerClusterOptions())
attackmap
library(leaflet)
library(readxl)
mymap <- leaflet()
mymap <- addTiles(mymap)
mymap <- setView(mymap, 4.48418, 51.917213, zoom=15)
mymap <- addMarkers(mymap, 4.48418, 51.917213, popup = "Data Scientists at work")
table <- read_excel("C:/Users/marco/Documents/School/Minor/R/parkeerautomaten-2013-nf.xls")
mymap <- addMarkers(mymap, lat = table$`X-Coord.`, lng = table$`Y-Coord.`, popup=table$`Straat`,  clusterOptions = markerClusterOptions())
mymap
View(mymap)
View(table)
shiny::runApp('Test')
shiny::runApp('Test')
runApp('Test')
random = runif(10, min = 0, max = 100)
random = as.integer(random)
runApp('~/hmmm')
runApp('hmmm')
runApp('Test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm(1, mean=175, sd=12)
rnorm([1:3], mean=175, sd=12)
rnorm(x=[1:3], mean=175, sd=12)
rnorm(x = c([1:3]), mean=175, sd=12)
rnorm(3, mean=175, sd=12)
rnorm(5, mean=175, sd=12)
rnorm(5, mean=175, sd=12, x=10)
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
list.files(path = ".")
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R")
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
View(mushrooms)
View(mushrooms)
lapply(mushrooms$class, FUN=rename)
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
rename <- function(letter){
if(letter == "e"){
return("edible")
}
else{
return("poisonous")
}
}
lapply(mushrooms$class, FUN=rename)
View(mushrooms)
sapply(mushrooms$class, FUN=rename)
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
rename <- function(letter){
if(letter == "e"){
return("edible")
}
else{
return("poisonous")
}
}
mushrooms$class <- sapply(mushrooms$class, FUN=rename)
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
library(circlize)
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
chordDiagram(mushrooms)
install.packages("chorddiag")
shiny::runApp('globalterrorism')
install.packages("chorddiag")
devtools::install_github("mattflor/chorddiag")
library(devtools)
build_github_devtools()
#### Restart R before continuing ####
install.packages("devtools.zip", repos = NULL)
# Remove the package after installation
unlink("devtools.zip")
library(devtools)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
devtools::install_github("mattflor/chorddiag")
install.packages("devtools")
devtools::install_github("mattflor/chorddiag")
devtools::install_github("mattflor/chorddiag")
shiny::runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
# Define UI for application that draws a histogram
ui <- fluidPage(
mainPanel(
chorddiagOutput("distPlot", width="100%")
)
)
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
debugSource('~/School/Minor/R/test_chorddiagram.R')
View(unique_values)
devtools::install_github("mattflor/chorddiag")
names(unique_values)
colnames(mushrooms)
colnames(mushrooms)[-1]
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
View(mushrooms)
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
original <- mushrooms
x <- mushrooms
ds_classes <- list("e" = "edible", "p" = "poisonous")
ds_cap_shape <- list( "b" = "bell","c" = "conical","x" = "convex","f" = "flat", "k" = "knobbed","s" = "sunken")
ds_cap_surface <- list("f" = "fibrous","g" = "grooves", "y" = "scaly","s" = "smooth")
ds_cap_color <- list("n" = "brown","b" = "buff","c" = "cinnamon","g" = "gray","r" = "green","p" = "pink","u" = "purple","e" = "red","w" = "white","u" = "yellow")
ds_bruises <- list("t" = "bruises", "f" = "no")
ds_odor <- list("a" = "almond", "l" = "anise", "c" = "creosote", "y" = "fishy", "f" = "foul", "m" = "musty", "n" = "none", "p" = "pungent", "s" = "spicy")
ds_gill_attachment <- list ("a" = "attached", "d" = "descending", "f" = "free", "n" = "notched")
ds_gill_spacing <- list("c" = "close", "w" = "crowded", "d" = "distant")
ds_gill_size <- list("b" = "broad", "n" = "narrow")
ds_gill_color <- list("k" = "black", "n" = "brown", "b" = "buff", "h" = "chocolate", "g" = "gray", "r" = "green", "o" = "orange", "p" = "pink", "u" = "purple", "e" = "red", "w" = "white", "y" = "yellow")
ds_stalk_shape <- list("e" = "enlarging", "t" = "tapering")
ds_stalk_root <- list("b" = "bulbous", "c" = "club", "u" = "cup", "e" = "equal", "z" = "rhizomorphs", "r" = "rooted", "?" = "missing")
ds_stalk_surface_above_ring <- list("f" = "fibrous", "y" = "scaly", "k" = "silky", "s" = "smooth")
ds_stalk_surface_below_ring <- list("f" = "fibrous", "y" = "scaly", "k" = "silky", "s" = "smooth")
ds_stalk_color_above_ring <- list("n" = "brown", "b" = "buff", "c" = "cinnamon", "g" = "gray", "o" = "orange", "p" = "pink", "e" = "red", "w" = "white", "y" = "yellow")
ds_stalk_color_below_ring <- list("n" = "brown", "b" = "buff", "c" = "cinnamon", "g" = "gray", "o" = "orange", "p" = "pink", "e" = "red", "w" = "white", "y" = "yellow")
ds_veil_type <- list("u" = "universal", "p" = "partial")
ds_veil_color <- list("n" = "brown", "o" = "orange", "w" = "white", "y" = "yellow")
ds_ring_number <- list("n" = "none", "o" = "one", "t" = "two")
ds_ring_type <- list("c" = "cobwebby", "e" = "evanescent", "f" = "flaring", "l" = "large", "n" = "none", "p" = "pendant", "s" = "sheating", "z" = "zone")
ds_spore_print_color <- list("k" = "black", "n" = "brown", "b" = "buff", "h" = "chocolate", "r" = "green", "o" = "orange", "u" = "purple", "w" = "white", "y" = "yellow")
ds_population <- list("a" = "abundant", "c" = "clustered", "n" = "numerous", "s" = "scattered", "v" = "several", "y" = "solitary")
ds_habitat <- list("g" = "grasses", "l" = "leaves", "m" = "meadows", "p" = "paths", "u" = "urban", "w" = "waste", "d" = "woods")
l <- list("class" = ds_classes, "cap.shape" = ds_cap_shape, "cap.surface" = ds_cap_surface,
"cap.color" = ds_cap_color,
"bruises" = ds_bruises, "odor" = ds_odor, "gill.attachment" = ds_gill_attachment, "gill.spacing" = ds_gill_spacing,
"gill.size" = ds_gill_size, "gill.color" = ds_gill_color, "stalk.shape" = ds_stalk_shape, "stalk.root" = ds_stalk_root,
"stalk.surface.above.ring" = ds_stalk_surface_above_ring, "stalk.surface.below.ring" = ds_stalk_surface_below_ring,
"stalk.color.above.ring" = ds_stalk_color_above_ring, "stalk.color.below.ring" = ds_stalk_color_below_ring,
"veil.type" = ds_veil_type, "veil.color" = ds_veil_color, "ring.number" = ds_ring_number,
"ring.type" = ds_ring_type, "spore.print.color" = ds_spore_print_color, "population" = ds_population,
"habitat" = ds_habitat)
listnames <- names(l)
mushrooms <- as.data.frame(sapply(listnames, function(item){
mushrooms[, item] <- revalue(x = mushrooms[,item], replace = unlist(l[[item]]))
}))
View(mushrooms)
library(shiny)
library(chorddiag)
library(tidyverse)
library(circlize)
require(dplyr)
library(plyr)
mushrooms <- read.csv("C:/Users/marco/Documents/School/Minor/R/mushrooms.csv")
original <- mushrooms
x <- mushrooms
ds_classes <- list("e" = "edible", "p" = "poisonous")
ds_cap_shape <- list( "b" = "bell","c" = "conical","x" = "convex","f" = "flat", "k" = "knobbed","s" = "sunken")
ds_cap_surface <- list("f" = "fibrous","g" = "grooves", "y" = "scaly","s" = "smooth")
ds_cap_color <- list("n" = "brown","b" = "buff","c" = "cinnamon","g" = "gray","r" = "green","p" = "pink","u" = "purple","e" = "red","w" = "white","u" = "yellow")
ds_bruises <- list("t" = "bruises", "f" = "no")
ds_odor <- list("a" = "almond", "l" = "anise", "c" = "creosote", "y" = "fishy", "f" = "foul", "m" = "musty", "n" = "none", "p" = "pungent", "s" = "spicy")
ds_gill_attachment <- list ("a" = "attached", "d" = "descending", "f" = "free", "n" = "notched")
ds_gill_spacing <- list("c" = "close", "w" = "crowded", "d" = "distant")
ds_gill_size <- list("b" = "broad", "n" = "narrow")
ds_gill_color <- list("k" = "black", "n" = "brown", "b" = "buff", "h" = "chocolate", "g" = "gray", "r" = "green", "o" = "orange", "p" = "pink", "u" = "purple", "e" = "red", "w" = "white", "y" = "yellow")
ds_stalk_shape <- list("e" = "enlarging", "t" = "tapering")
ds_stalk_root <- list("b" = "bulbous", "c" = "club", "u" = "cup", "e" = "equal", "z" = "rhizomorphs", "r" = "rooted", "?" = "missing")
ds_stalk_surface_above_ring <- list("f" = "fibrous", "y" = "scaly", "k" = "silky", "s" = "smooth")
ds_stalk_surface_below_ring <- list("f" = "fibrous", "y" = "scaly", "k" = "silky", "s" = "smooth")
ds_stalk_color_above_ring <- list("n" = "brown", "b" = "buff", "c" = "cinnamon", "g" = "gray", "o" = "orange", "p" = "pink", "e" = "red", "w" = "white", "y" = "yellow")
ds_stalk_color_below_ring <- list("n" = "brown", "b" = "buff", "c" = "cinnamon", "g" = "gray", "o" = "orange", "p" = "pink", "e" = "red", "w" = "white", "y" = "yellow")
ds_veil_type <- list("u" = "universal", "p" = "partial")
ds_veil_color <- list("n" = "brown", "o" = "orange", "w" = "white", "y" = "yellow")
ds_ring_number <- list("n" = "none", "o" = "one", "t" = "two")
ds_ring_type <- list("c" = "cobwebby", "e" = "evanescent", "f" = "flaring", "l" = "large", "n" = "none", "p" = "pendant", "s" = "sheating", "z" = "zone")
ds_spore_print_color <- list("k" = "black", "n" = "brown", "b" = "buff", "h" = "chocolate", "r" = "green", "o" = "orange", "u" = "purple", "w" = "white", "y" = "yellow")
ds_population <- list("a" = "abundant", "c" = "clustered", "n" = "numerous", "s" = "scattered", "v" = "several", "y" = "solitary")
ds_habitat <- list("g" = "grasses", "l" = "leaves", "m" = "meadows", "p" = "paths", "u" = "urban", "w" = "waste", "d" = "woods")
l <- list("class" = ds_classes, "cap.shape" = ds_cap_shape, "cap.surface" = ds_cap_surface,
"cap.color" = ds_cap_color,
"bruises" = ds_bruises, "odor" = ds_odor, "gill.attachment" = ds_gill_attachment, "gill.spacing" = ds_gill_spacing,
"gill.size" = ds_gill_size, "gill.color" = ds_gill_color, "stalk.shape" = ds_stalk_shape, "stalk.root" = ds_stalk_root,
"stalk.surface.above.ring" = ds_stalk_surface_above_ring, "stalk.surface.below.ring" = ds_stalk_surface_below_ring,
"stalk.color.above.ring" = ds_stalk_color_above_ring, "stalk.color.below.ring" = ds_stalk_color_below_ring,
"veil.type" = ds_veil_type, "veil.color" = ds_veil_color, "ring.number" = ds_ring_number,
"ring.type" = ds_ring_type, "spore.print.color" = ds_spore_print_color, "population" = ds_population,
"habitat" = ds_habitat)
mushrooms <- as.data.frame(sapply(listnames, function(item){
mushrooms[, item] <- revalue(x = mushrooms[,item], replace = unlist(l[[item]]))
}))
listnames <- names(l)
View(mushrooms)
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
