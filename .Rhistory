return(word)
}
#count all words
countwords <- function(word){
return(sapply(strsplit(toString(word), " "), length))
}
getrgb <- function(data){
if(length(unique(data$cc)) == 3){
data <- mutate(data,channel=factor(cc,labels=c('R','G','B')))
data$value <- data$value * 255
x <- aggregate(data$value, by = list(v = data$cc), sum)
x <- x[, -c(1)]
sum <- sum(x)
x <- x * 100 / sum
x <- t(x)
x <- cbind(x, c(sum))
return(x)
}
}
readtext <- function(file){
img <- as.data.frame(load.image(file))
if(length(unique(img$cc)) == 3){
text <- words <- image_read(file) %>%
image_resize("500x") %>%
image_convert(type = 'Grayscale') %>%
image_contrast(sharpen = 1) %>%
image_quantize(max = 128,colorspace = "rgb",dither = NULL, treedepth = NULL) %>%
image_charcoal %>%
image_ocr %>%
cleanwords
print(file)
rgb <- getrgb(as.data.frame(magick2cimg(image_scale(image_read(file), "500x"))))
return(list(cover_link = file, text = text, wordcount = countwords(text), R = rgb[1], G = rgb[2], B =  rgb[3], brightness = rgb[4]))
}
}
data <- lapply(texts$files, readtext)
library(imager)
library(ggplot2)
library(dplyr)
library(tesseract)
library(stringr)
library(parallel)
library(magick)
library(tidyverse)
####################################
#################################### PARALLISATION -> ignore this
####################################
mclapply.hack <- function(...) {
## Create a cluster
size.of.list <- length(list(...)[[1]])
cl <- makeCluster( min(size.of.list, 2L) )
## Find out the names of the loaded packages
loaded.package.names <- c(
## Base packages
sessionInfo()$basePkgs,
## Additional packages
names( sessionInfo()$otherPkgs ))
tryCatch( {
## Copy over all of the objects within scope to
## all clusters.
this.env <- environment()
while( identical( this.env, globalenv() ) == FALSE ) {
clusterExport(cl,
ls(all.names=TRUE, env=this.env),
envir=this.env)
this.env <- parent.env(environment())
}
clusterExport(cl,
ls(all.names=TRUE, env=globalenv()),
envir=globalenv())
## Load the libraries on all the clusters
## N.B. length(cl) returns the number of clusters
parLapply( cl, 1:length(cl), function(xx){
lapply(loaded.package.names, function(yy) {
require(yy , character.only=TRUE)})
})
## Run the lapply in parallel
return( parLapply( cl, ...) )
}, finally = {
## Stop the cluster
stopCluster(cl)
})
}
# Warn the user if they are using Windows
if( Sys.info()[['sysname']] == 'Windows' ){
message(paste(
"\n",
"   *** Microsoft Windows detected ***\n",
"   \n",
"   For technical reasons, the MS Windows version of mclapply()\n",
"   is implemented as a serial function instead of a parallel\n",
"   function.",
"   \n\n",
"   As a quick hack, we replace this serial version of mclapply()\n",
"   with a wrapper to parLapply() for this R session. Please see\n\n",
"     http://www.stat.cmu.edu/~nmv/2014/07/14/implementing-mclapply-on-windows \n\n",
"   for details.\n\n"))
}
# If the OS is Windows, set mclapply to the
# the hackish version. Otherwise, leave the
# definition alone.
mclapply <- switch( Sys.info()[['sysname']],
Windows = {mclapply.hack},
Linux   = {mclapply},
Darwin  = {mclapply})

#count execution time
start.time <- Sys.time()
path <- "C:/Users/marco/Documents/School/Minor/R/TeamBoekToe/parsedimages_full/"
#path <- "C:/Users/marco/Documents/School/Minor/R/TeamBoekToe/images/"
# path <- "C:/Users/marco/Documents/School/Minor/R/TeamBoekToe/parsedimages_converted/out/imgs_sorted/"
files <- list.files(path)
files <- paste(path, files, sep="")
#put files in data frame
texts <- data.frame(files)
#remove all trash from string, like spaces and weird characters
cleanwords <- function(word){
word <- str_replace_all(word, "[^[:alnum:]]", " ")
word <- str_squish(word)
return(word)
}
#count all words
countwords <- function(word){
return(sapply(strsplit(toString(word), " "), length))
}
getrgb <- function(data){
if(length(unique(data$cc)) == 3){
data <- mutate(data,channel=factor(cc,labels=c('R','G','B')))
data$value <- data$value * 255
x <- aggregate(data$value, by = list(v = data$cc), sum)
x <- x[, -c(1)]
sum <- sum(x)
x <- x * 100 / sum
x <- t(x)
x <- cbind(x, c(sum))
return(x)
}
}
readtext <- function(file){
img <- as.data.frame(load.image(file))
if(length(unique(img$cc)) == 3){
text <- words <- image_read(file) %>%
image_resize("500x") %>%
image_convert(type = 'Grayscale') %>%
image_contrast(sharpen = 1) %>%
image_quantize(max = 128,colorspace = "rgb",dither = NULL, treedepth = NULL) %>%
image_charcoal %>%
image_ocr %>%
cleanwords
print(file)
rgb <- getrgb(as.data.frame(magick2cimg(image_scale(image_read(file), "500x"))))
return(list(cover_link = file, text = text, wordcount = countwords(text), R = rgb[1], G = rgb[2], B =  rgb[3], brightness = rgb[4]))
}
}
data <- lapply(texts$files, readtext)
texts <- as.data.frame(do.call(rbind, data))
#########Get data from csv
texts$cover_link <- as.character(texts$cover_link)
texts$R <- as.numeric(texts$R)
texts$G <- as.numeric(texts$G)
texts$B <- as.numeric(texts$B)
texts$brightness <- as.numeric(texts$brightness)
bookdata <- read.csv(file = 'C:/Users/marco/Documents/School/Minor/R/TeamBoekToe/parseddata.csv')
bookdata$cover_link <- lapply(strsplit(bookdata$cover_link,split="/"), tail, n=1)
texts$cover_link <- lapply(strsplit(texts$cover_link ,split="/"), tail, n=1)
bookdata <- bookdata %>% select(average_rating, cover_link)
bookdata$cover_link <- as.character(bookdata$cover_link)
texts$cover_link <- as.character(texts$cover_link)
texts <- merge(texts, bookdata, by="cover_link")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
texts$wordcount <- as.numeric(texts$wordcount)
texts$R <- as.numeric(texts$R)
texts$G <- as.numeric(texts$G)
texts$B <- as.numeric(texts$B)
texts$average_rating <- as.numeric(texts$average_rating)
texts$brightness <- as.numeric(texts$brightness)
values_to_compare <- texts %>% select(wordcount, R, G, B, brightness, average_rating)
#values_to_compare <- texts %>% select(wordcount, average_rating)
pairs(values_to_compare)
library("ggplot2")
library("GGally")
ggpairs(values_to_compare)
path <- "C:/Users/marco/Documents/School/Minor/R/TeamBoekToe/images - Copy/imgs/"
files <- list.files(path)
files <- paste(path, files, sep="")
#put files in data frame
texts <- data.frame(files)
readtext <- function(file){
text <- as.data.frame(tesseract::ocr_data(file)) %>%
subset(confidence > 30) %>%
paste(data$word, collapse= " ") %>%
cleanwords(data) %>%
cleanwords
return(list(cover_link = file, text = text))
}
data <- mclapply(texts$files, readtext)
View(data)
texts <- as.data.frame(do.call(rbind, data))
#########Get data from csv
texts$cover_link <- as.character(texts$cover_link)
texts$G <- as.numeric(texts$G)
texts$brightness <- as.numeric(texts$brightness)
bookdata <- read.csv(file = 'C:/Users/marco/Documents/School/Minor/R/TeamBoekToe/parseddata.csv')
bookdata$cover_link <- lapply(strsplit(bookdata$cover_link,split="/"), tail, n=1)
texts$cover_link <- lapply(strsplit(texts$cover_link ,split="/"), tail, n=1)
bookdata$cover_link <- as.character(bookdata$cover_link)
texts <- merge(texts, bookdata, by="cover_link")
time.taken
bookdata <- bookdata %>% select(average_rating, cover_link)
bookdata$cover_link <- as.character(bookdata$cover_link)
texts$cover_link <- as.character(texts$cover_link)
texts <- merge(texts, bookdata, by="cover_link")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
texts$wordcount <- as.numeric(texts$wordcount)
texts$R <- as.numeric(texts$R)
texts$G <- as.numeric(texts$G)
texts$B <- as.numeric(texts$B)
texts$average_rating <- as.numeric(texts$average_rating)
texts$brightness <- as.numeric(texts$brightness)
values_to_compare <- texts %>% select(wordcount, R, G, B, brightness, average_rating)
pairs(values_to_compare)
pairs(values_to_compare)
```{r}
library("ggplot2")
library("GGally")
ggpairs(values_to_compare)
install.packages("RColorBrewer") # color palettes
install.packages("wordcloud") # word-cloud generator
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
wordcloud(c("hoi", "hoi", "hoi", "doei"))
install.packages("tm")
wordcloud(c("hoi", "hoi", "hoi", "doei"))
wordcloud(c("hoi", "hoi", "hoi", "doei", "doei"))
wordcloud(c("hoi", "hoi", "hoi", "doei", "doei"))
library(dplyr)
require(dplyr)
count(c("hoi", "hoi", "doei"))
count
ggcorr
install.packages("ggplot2")
library("ggplot2")
library("GGally")
library("ggplot2")
ggpairs(values_to_compare)
ggcorr(values_to_compare, palette = "RdBu", label = TRUE)
library("ggplot2")
library("GGally")
ggpairs(values_to_compare)
ggcorr(values_to_compare, palette = "RdBu", label = TRUE)
shiny::runApp('Assignment_DataVisualisation')
ui <- navbarPage("Mushrooms: edible or poisonous?",
tabPanel("Safe to eat, or deadly poisonous?",
sidebarPanel(
h2("Choose mushroom properties"),
fluidRow(
column(6,
lapply(colnames(mushrooms)[-1][1:11], function(id) {
selectInput(id, gsub("\\.", " ", id), choices = c("Subset dataset" = "", unique(mushrooms[,id])), width="80%")
}),
),
column(6,
lapply(colnames(mushrooms)[-1][12:22], function(id) {
selectInput(id, gsub("\\.", " ", id), choices = c("Subset dataset" = "", unique(mushrooms[,id])), width="80%")
}),
)
),
width = 4
),
mainPanel(
fluidRow(
h1("Chance of mushroom being poisonous or edible"),
htmlOutput("edibilityStats"),
plotlyOutput("ratio", height="100px"),
),
width=8
)
),
tabPanel("Relationship between mushroom properties and edibility",
mainPanel(
fluidRow(
h1("Connections between edibility and mushrooms properties"),
chorddiagOutput("distPlot", height="800px")
),
)
)
)
getEdible()
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
install.packages("doBy")
install.packages("doBy")
shiny::runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='marcomaissan',
token='31A2D424336D0567059DB00AF04BC557',
secret='rYb2gaFg2lBlqiWBgiaVFicd+OMmYIEtv3VoLNNJ')
library(rsconnect)
rsconnect::deployApp('C:\Users\marco\Documents\Assignment_DataVisualisation')
library(rsconnect)
rsconnect::deployApp('C:/Users/marco/Documents/Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
rsconnect("library(rsconnect)
deployApp()
")
library(rsconnect)
deployApp()
library(rsconnect)
deployApp("./Assignment_DataVisualisation")
library(rsconnect)
deployApp("./Assignment_DataVisualisation")
magma(12)
runApp('Assignment_DataVisualisation')
rainbow(20)
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
library(rsconnect)
deployApp("./Assignment_DataVisualisation")
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
library(rsconnect)
deployApp("./Assignment_DataVisualisation")
runApp('Assignment_DataVisualisation')
library(rsconnect)
deployApp("./Assignment_DataVisualisation")
shiny::runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
library(cars)
cars$speed
plot(x, y)
x <- cars$speed
y <- cars$dist
plot(x, y)
nls(y ~ x)
model <- lm(x~y)
model$co[0]
model$co
abline(model)
model <- lm(y~x)
model$co
abline(model)
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- glm(y~x)
abline(model)
model <- lm(y ~ x + I(x^2))
abline(model)
model
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
co <- coef(model)
coef(model)
curve(f(x, a=co[0], b=co[1], c=co[3]))
curve(f(x, a=co[0], b=co[1], c=co[3]), add=TRUE, )
curve(y ~ co[1] + co[2]*x + co[3]*x*x)
curve(co[1] + x*co[2] + x*x*co[3])
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
coef(model)
curve(co[1] + x*co[2] + x*x*co[3])
curve(co[1] + x*co[2] + x*x*co[3], add=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
f <- function(x,a,b,c){a*x^2+b*x+c}
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
co <- coef(fit)
co <- coef(model)
co <- coef(model)
co
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE, col=“green”, lwd=2)
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE, col="green", lwd=2)
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE,lty=2, col="green", lwd=2)
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
coef(model)
curve(co[1] + x*co[2] + x*x*co[3], add=TRUE)
f <- function(x,a,b,c){a*x^2+b*x+c}
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE,lty=2, col="green", lwd=2)
source('~/.active-rstudio-document', echo=TRUE)
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
coef(model)
curve(co[1] + x*co[2] + x*x*co[3], add=TRUE)
f <- function(x,a,b,c){a*x^2+b*x+c}
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE, col="green", lwd=2)
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
coef(model)
curve(co[1] + x*co[2] + x*x*co[3], add=TRUE)
f <- function(x,a,b,c){a*x^2+b*x+c}
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE, col="green", lwd=2)
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
coef(model)
curve(co[1] + x*co[2] + x*x*co[3], add=TRUE)
f <- function(x,a,b,c){a*x^2+b*x+c}
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE, col="green", lwd=2)
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
coef(model)
curve(co[1] + x*co[2] + x*x*co[3], add=TRUE)
f <- function(x,a,b,c){a*x^2+b*x+c}
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
co <- coef(model)
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE, col="green", lwd=2)
x <- cars$speed
y <- cars$dist
plot(x, y)
model <- lm(y~x)
model$co
abline(model)
model <- lm(y ~ x + I(x^2))
co <- coef(model)
coef(model)
curve(co[1] + x*co[2] + x*x*co[3], add=TRUE)
f <- function(x,a,b,c){a*x^2+b*x+c}
model <- nls(dist ~ f(speed,a,b,c), data=cars, start=c(a=1, b=1, c=1))
co <- coef(model)
curve(f(x, a=co[1], b=co[2], c=co[3]), add=TRUE, lty=2, col="green", lwd=2)
shiny::runApp('Assignment_DataVisualisation')
library(rsconnect)
deployApp()
deployApp(./Assignment_DataVisualisation)
deployApp("./Assignment_DataVisualisation")
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
library(rsconnect)
deployApp("./Assignment_DataVisualisation")
runApp('Assignment_DataVisualisation')
deployApp("./Assignment_DataVisualisation")
shiny::runApp('Assignment_DataVisualisation')
data.frame(x=colname, freq=0)
data.frame(x="colname", freq=0)
runApp('Assignment_DataVisualisation')
library(rsconnect)
publishApp("./opdracht_datavisualisatie")
runApp('Assignment_DataVisualisation')
shiny::runApp('Assignment_DataVisualisation')
transposed <- reactiveVal(FALSE)
runApp('Assignment_DataVisualisation')
runApp('Assignment_DataVisualisation')
publishApp("./opdracht_datavisualisatie")
library(rsconnect)
publishApp("./opdracht_datavisualisatie")
deployApp("./Assignment_DataVisualisation")
deployApp("./Assignment_DataVisualisation")
deployApp("./Assignment_DataVisualisation")
deployApp("./Assignment_DataVisualisation")
deployApp("./Assignment_DataVisualisation")
shiny::runApp('Assignment_DataVisualisation')
